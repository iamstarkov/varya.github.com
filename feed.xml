<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[var ya; stepanova]]></title>
        <description><![CDATA[Front end developer, blogger and cats lover.]]></description>
        <link>http://varya.me/</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Mon, 30 Jun 2014 08:57:37 GMT</lastBuildDate>
        <atom:link href="http://varya.me//feed.xml" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Varya Stepanova]]></author>
        <pubDate>Mon, 30 Jun 2014 08:57:20 GMT</pubDate>
        <item>
            <title><![CDATA[The so different frontend community and how we deal with it]]></title>
            <description><![CDATA[<p>Long time ago I could read and learn about web development in Russian only. Later, having completed an English language course, I began to read articles and blogs in English more and more. The same went for conferences: I visited
Russian-speaking conferences at first and later switched to English-speaking conferences in Europe. In both articles and conference talks, I noticed how the content was different depending on the language used. Sometime I even thought that the communities evolve in different ways and follow different directions.</p>
<p><excerpt/>
My Russian-speaking colleagues indeed know the &quot;<a href="http://vitaly.harisov.name/article/independent-blocks.html">HTML/CSS markup with independent blocks</a>&quot;
article by Vitaly Harisov. He published
this in 2008 and outlined the main principles of HTML/CSS development which is known as BEM nowadays. We can say
that was the moment BEM started being used in Russia and neighbouring countries. As for English-speaking developers, they
learned about BEM only in 2012 from <a href="http://www.smashingmagazine.com/2012/04/16/a-new-front-end-methodology-bem/">my article in
SmashingMagazine</a>. Then, as you might
know, <a href="http://csswizardry.com/about/">Harry Roberts</a> caught sight
of that and thanks to his publications BEM became known to the rest of the world.</p>
<p>Thus, 4 years passed since the technology was released until a typical English-speaking web developer got a chance to learn about it. This could have been enough time for a technology to mature and slowly die.</p>
<p>No doubt, a better option would be to make it available back in 2008. I suppose that modular trend on the web would have started earlier and we would have got the results faster. Today we
would use Web Components (they implement some component ideas of BEM) everywhere (and for a long time, already).</p>
<p>With all this in mind, I decided to dedicate some of my free time to publish translations on my blog.
So the translated articles on <a href="/en/issues/ym-modular-system">Ymaps modules</a> and
<a href="/en/issues/beml-html-preprocessor">BEML</a> were published. I also had more articles in the queue for translation. Reading
a lot of developer blogs in Russian, I realized that a lot of interesting content is still being produced. &quot;Is this for Russia only?&quot; I asked myself.</p>
<p>Imagine all these new approaches, libraries, and frameworks that exist today all over the world!.. but you will never
learn them because their authors publish in Arabic, Spanish, Japanese or other languages you do not speak.</p>
<p>Nevertheless, we frontend developers have a wonderful community. Open source culture
and technologies like GitHub enable us to help each other and get better results together. To contribute, one does not have to be an expert. For example, many products get their documentation improved just with the help of people who like the project.</p>
<p>This encouraged me to create a collaboration web site for translating frontend articles from local languages into English.</p>
<p>The project is called <strong>Frontend Babel</strong> and here is the URL: <a href="http://frontendbabel.info">http://frontendbabel.info</a>.
Technically, it is a statically generated blog (thanks to DocPad). Any person can take it and run a local copy, then add
a translated article and submit a pull request into the original source.</p>
<ul>
<li><a href="http://frontendbabel.info/about/">About the project</a></li>
<li><a href="https://github.com/frontendbabel/frontendbabel.github.com">Repository on GitHub</a></li>
<li><a href="http://frontendbabel.info/how-to-contribute">How to contribute</a></li>
</ul>
<p>The first couple of articles were already translated by <a href="https://www.google.com/+MaxShirshin">Max Shirshin</a>. These are:</p>
<ul>
<li>an interesting <a href="http://frontendbabel.info/articles/webpage-rendering-101">post about web page rendering by Alexander
Skutin</a></li>
<li>an awesome <a href="http://frontendbabel.info/articles/graphical-interface">article about graphical interface by Danil
Kovchy</a></li>
</ul>
<p>You can already share these links with your English-speaking colleagues :-)</p>
<p>Max and I have plans to translate more during the next weeks. I encourage all of you who knows Arabic, Japanese, Polish, French, Spanish (and any other language) to join the project and help us translate. English-speaking developers can do proofreading.</p>
<p>Translating into a foreign language is hard work indeed, but with the help of English-speaking people in our community, we will get the texts improved. So, if you were thinking about writing in English, this may be a good chance to start and learn.<br/></p>
<p>Interesting articles will attract visitors. With this, both an author and a translator get more attention on the web and establish new proffesional contacts throught their websites and social networks.</p>
<p>Always remember: a contribution to an open source project can be small, but it is always appreciated! Here are just
some ideas on what you can do:</p>
<ul>
<li><a href="https://github.com/frontendbabel/frontendbabel.github.com/issues/new">Add new source articles into our task
queue</a><br/>
If you know an interesting article worth to be published, create an issue about it. So another
contributer can grab this task and translate it.</li>
<li><a href="http://frontendbabel.info/how-to-contribute#push-new-translation">Push new translations</a><br/>
Find a nice article in a language you know, translate it into English and publish on this website.</li>
<li><strong>Tell friends about the project</strong><br/>
Mentioning this project in social networks and your blog posts you can involve people from
all over the world!</li>
<li>Fix English in the texts<br/>
If you spot a grammatical error, you can edit an article (there is a link to an editor below) and submit
a pull request.</li>
<li>Propose site changes<br/>
Suggest what can be improved on this web site by adding your ideas to <a href="https://github.com/frontendbabel/frontendbabel.github.com/issues?labels=%40+Translation&amp;state=open">the list of
issues</a>.</li>
<li><a href="https://github.com/frontendbabel/frontendbabel.github.com/issues?labels=&amp;page=1&amp;state=open">Grab an issue to do</a><br/></li>
</ul>
<p>Your contributions will help improve this project a lot!</p>
]]></description>
            <link>http://varya.me//en/posts/frontend-babel-alpha</link>
            <guid isPermaLink="true">http://varya.me//en/posts/frontend-babel-alpha</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Mon, 30 Jun 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Про дружбу народов во frontend сообществе]]></title>
            <description><![CDATA[<p>Когда-то я читала о web-разработке только на русском. Позднее, выучившись на курсах английского, я стала всё больше и
больше читать англоязычные блоги и статьи. Также было и с конференциями: начав с русскоязычных, я затем стала посещать и
зарубежные. Иногда и со статьями, и с
докладами, я замечала, что контент очень разный. Бывало, складывалось впечатление, что каждое сообщество безусловно
развивается, но своим путём.</p>
<p><excerpt/>
Думаю, многие русскоязычные разработчики знают статью Виталия Харисова «<a href="http://vitaly.harisov.name/article/independent-blocks.html">Вёрстка независимыми
блоками</a>».
Виталий опубликовал её в 2008 году, обозначив основные принципы вёрстки, известные сейчас под именем БЭМ. Можно считать,
что с того момента началось развитие БЭМ в России и соседних странах. А разработчики, владеющие английским языком,
узнали про БЭМ лишь в 2012 году из <a href="http://www.smashingmagazine.com/2012/04/16/a-new-front-end-methodology-bem/">моей статьи в
SmashingMagazine</a>.
Потом, как вы знаете, методология понравилась <a href="http://csswizardry.com/about/">Гари Робертсу</a> и благодаря его публикациям распространилась и на Западе.</p>
<p>Итак, прошло <strong>4 года</strong> между тем как технология была выпущена в свет и тем как о ней узнал обычный фронтендер из Алабамы.
За такой срок многие технологические вещи даже успевают устареть.</p>
<p>Нет никаких сомнений: и для технологии, и для индустрии было бы намного лучше, узнай массовый пользователь о БЭМ в
далеком 2008. Скорее всего развитие модульных технологий в Web началось бы раньше, и пошло бы быстрее. Уже сейчас мы бы
использовали WebComponents (реализующие идеи компонентного подхода БЭМ) повсеместно.</p>
<p>Некоторое время назад, размышляя над фактами, изложенными выше, я решила посвящать часть своего времени и страниц в блоге
переводам. Так появились посты-переводы про <a href="/en/issues/ym-modular-system">Ymaps modules</a> и
<a href="/en/issues/beml-html-preprocessor">BEML</a>. Сразу скажу, на очереди для перевода были и другие статьи. Читая личные блоги и
Хабр, я видела, что люди пишут уйму всего интересного. Но... разве только в России?</p>
<p>Представьте, сколько новых решений, библиотек, фреймворков есть на сегодняшний момент в других уголках света!
Только вы о них не узнаете, ведь их авторы говорят на арабском, испанском, японском и на многих других неизвестных вам
языках :-)</p>
<p>И всё-таки мы живём в удивительное время, и у нас, разработчиков интерфейсов, потрясающее сообщество. Open source
культура и такие технологии как GitHub позволяют нам помогать друг другу и добиваться намного больших результатов
вместе. При этом вовсе не обязательно коммитить в NodeJS, чтобы внести свой вклад. Так, например, работает известный многим
проект Frontender.info — благодаря коллективному труду у русскоязычных разработчиков есть постоянно обновляемый ресурс с
переводами самых актуальных статей с английского языка на русский.</p>
<p>Всё это подтолкнуло меня к созданию сервиса коллективных переводов на английский.</p>
<p>Проект называется <strong>Frontend Babel </strong> и уже доступен по адресу <a href="http://frontendbabel.info">http://frontendbabel.info</a>.
Это статический блог (здесь я говорю спасибо DocPad за генерацию) — любой может развернуть его у себя, добавить
статью-перевод и пул-реквестом влить в сайт.</p>
<ul>
<li><a href="http://frontendbabel.info/about/">о проекте</a></li>
<li><a href="https://github.com/frontendbabel/frontendbabel.github.com">репозиторий</a></li>
<li><a href="http://frontendbabel.info/how-to-contribute">как контрибьютить</a></li>
</ul>
<p>Первые статьи уже перевёл с русского Макс Ширшин. Это</p>
<ul>
<li>интересная <a href="http://frontendbabel.info/articles/webpage-rendering-101">заметка Александра Скутина о рендеринге
страниц</a> (вы могли читать её на Хабре)</li>
<li>и прекрасная <a href="http://frontendbabel.info/articles/graphical-interface">статья Данила
Ковчего о графическом интерфейсе</a>.</li>
</ul>
<p>Можете уже сейчас поделиться этими
ссылками со своими англоязычными коллегами :-) Пусть узнают, какой у нас создаётся хороший контент.</p>
<p>Мы с Максом собираемся пререводить всё новые и новые статьи. Также я приглашаю присоединиться к проекту арабо- японо-
испано- (тут даже бессмысленно перечислять каких ещё) язычных разработчиков. Надеюсь, они откликнутся, и мы наконец-то сможем узнать об
идеях и технических новинках наших коллег. Правда, вдохновить их на работу можно будет только собственным примером. Так
что, присоединяйтесь и вы.</p>
<p>Конечно, переводить на чужой язык намного сложнее, чем на родной. Но всё равно я хочу вас воодушевить. Все статьи
будут вычитываться (пока нами с Максом, а очень скоро — нейтивами), если вы ещё не пишете на английском, но хотели
начать, это отличная возможность потренироваться и научиться новому.<br/>
Статьи с хорошим контентом получают траффик. И упоминание автора и переводчика статьи (со ссылками на сайт и
социальные сети) — это заслуженные ими упоминание и новые профессиональные контакты.</p>
<p>Всегда помните: вклад в open source проект может быть небольшим, но в любом случае он неоценим! Вот лишь несколько идей,
каким может быть ваше участие:</p>
<ul>
<li><a href="https://github.com/frontendbabel/frontendbabel.github.com/issues/new">Добавьте статью в очередь на
перевод</a><br/>
Если вы знаете интересную статью (да хоть вашу собственную), которую стоит опубликовать, заведите issue об этом. Другой
участник проекта увидит эту задачу и переведёт.</li>
<li><a href="http://frontendbabel.info/how-to-contribute#push-new-translation">Сделайте свой перевод</a><br/>
Найдите интересную статью на русском, переведите её на английский и опубликуйте на сайте.</li>
<li><strong>Расскажите друзьям и коллегам о проекте</strong><br/>
Написав о Frontend Babel в Twitter, Facebook или своём блоге, вы поможете привлечь новых участников проекта. Особенно
круто вставить несколько мотивационных слов от себя :-)</li>
<li>Поправьте английский в статьях<br/>
Если вы видите грамматическую ошибку или опечатку, статью можно отредактировать (внизу, под текстом, есть ссылка) и
предложить свой pull request.</li>
<li>Предложите улучшения на сайте<br/>
Посоветуйте, что можно было бы улучшить, изложив свои идеи в
<a href="https://github.com/frontendbabel/frontendbabel.github.com/issues?labels=%40+Translation&amp;state=open">списке
задач</a>.</li>
<li><a href="https://github.com/frontendbabel/frontendbabel.github.com/issues?labels=&amp;page=1&amp;state=open">Возьмите на себя задачу</a><br/>
С вашим участием сайт может стать намного лучше!</li>
</ul>
]]></description>
            <link>http://varya.me//ru/posts/frontend-babel-alpha</link>
            <guid isPermaLink="true">http://varya.me//ru/posts/frontend-babel-alpha</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Mon, 30 Jun 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Using side drawers in mobile apps on Steroids.js]]></title>
            <description><![CDATA[<p>As a mobile apps user you may be already familiar to drawers.
They are quite popular solution for a side menu. Using <code>Steroids</code>
HTML5/JavaScript framework for hybrid mobile applications, you
can bring such an interface solution into your product very easy.</p>
<excerpt/>

<p>The usage of drawers explained here is demonstrated in the <a href="https://github.com/AppGyver/kitchensink">Steroids
Kitchensink</a> open source application.
This is now being developed set of most useful examples for Steroids.
As the application is constantly changing, I will freeze the code examples
at <a href="https://github.com/AppGyver/kitchensink/tree/ceacb0ea80799b1d81454e2e966b553b807fbadc">28 May 2014</a>.</p>
<p>To explore the application in your mobile device or in a
simulator clone the repository and run the project. You may need some information
about how to start Steroids projects. That can be learned from tutorials:</p>
<ul>
<li><a href="https://academy.appgyver.com/categories/1-setup-and-getting-started/contents/1-installing-steroids">Installing
Steroids</a></li>
<li><a href="https://academy.appgyver.com/categories/1-setup-and-getting-started/contents/2-hello-world">Hello World application</a></li>
</ul>
<p>Or from my recent article about <a href="/en/posts/html5-mobile-app-width-native-ui/">HTML5 mobile apps with native UI on
Steroids</a>.</p>
<p>Once run the project you will see a page with a list of examples
and a navigation bar.</p>
<p><img class="article__image" src="http://img-fotki.yandex.ru/get/9652/14441195.32/0_8477d_3b6d66a5_L.png" width="282" height="500" border="0"/></p>
<p>The button to teh left of a menu bar opens a side menu. But before we start to
study side drawers let&#39;s look at how this button is shown.</p>
<p>The initial view is coded in <a href="https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/app/views/example/index.html"><code>app/views/example/index.html</code></a>.
This is an angular view with directives for the list and for the navigation bar.</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">ng-controller</span>=<span class="hljs-value">"IndexCtrl"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">navigation-bar</span> <span class="hljs-attribute">title</span>=<span class="hljs-value">"Steroids Kitchensink"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">left-button</span> <span class="hljs-attribute">icon</span>=<span class="hljs-value">"/vendor/icons8/menu-32"</span>
        <span class="hljs-attribute">onTap</span>=<span class="hljs-value">"showMenu()"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">left-button</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">navigation-bar</span>&gt;</span>
  ...
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p>The <code>navigation-bar</code> directive is custom and described in <a href="https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/app/directives/navigationBar.coffee"><code>app/directives/navigationBar.coffee</code></a>.
Using such a directive rather than <code>steroids.view.navigationBar</code> helpers at every page is
more useful for the applications with many views.</p>
<p>Indeed inside the directive the same helpers are used. But declaring navigation bar
title and buttons in the view makes our programmers lifes a little bit
easier.</p>
<p>Here the navigation bar titled &quot;Steroids Kitchensink&quot; contains a &quot;hamburger&quot;
menu button which responds to the tapping with calling <code>showMenu</code> methods of
the corresponding controller.</p>
<p>This controller is coded in <a href="https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/app/controllers/example.coffee"><code>app/controllers/example.coffee</code></a>.
As you can see, the <code>showMenu</code> method is pretty short.</p>
<pre class="highlight"><code class="hljs coffeescript">$scope.<span class="hljs-function"><span class="hljs-title">showMenu</span> = <span class="hljs-params">()</span>-&gt;</span>
  steroids.drawers.show {
    <span class="hljs-attribute">edge</span>: steroids.screen.edges.LEFT
  }
</code></pre>
<p>It uses the drawers <code>show</code> method and slide the initial view to
the right which uncovers the menu view.</p>
<p>Of course, the code needs to know what is the view we mean by &#39;left&#39;.
We have to provide it with such a knowledge declaring the list of drawers
in the <a href="https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/config/application.coffee#L39"><code>config/application.coffee</code></a>
configuration file.</p>
<pre class="highlight"><code class="hljs coffeescript">steroids.config.drawers =
  <span class="hljs-attribute">left</span>:
    <span class="hljs-attribute">id</span>: <span class="hljs-string">"sidemenu"</span>
    <span class="hljs-attribute">location</span>: <span class="hljs-string">"http://localhost/views/sidemenu/index.html"</span>
    <span class="hljs-attribute">showOnAppLoad</span>: <span class="hljs-literal">false</span>
    <span class="hljs-attribute">widthOfDrawerInPixels</span>: <span class="hljs-number">250</span>
  <span class="hljs-attribute">options</span>:
    <span class="hljs-attribute">centerViewInteractionMode</span>: <span class="hljs-string">"Full"</span>
    <span class="hljs-attribute">closeGestures</span>: [<span class="hljs-string">"PanNavBar"</span>, <span class="hljs-string">"PanCenterView"</span>, <span class="hljs-string">"TapCenterView"</span>]
    <span class="hljs-attribute">openGestures</span>: [<span class="hljs-string">"PanNavBar"</span>, <span class="hljs-string">"PanCenterView"</span>]
    <span class="hljs-attribute">showShadow</span>: <span class="hljs-literal">true</span>
    <span class="hljs-attribute">stretchDrawer</span>: <span class="hljs-literal">true</span>
    <span class="hljs-attribute">widthOfLayerInPixels</span>: <span class="hljs-number">0</span>
</code></pre>
<p>Here the menu view file and some parameters. You can learn about
what they mean from a special tutorial about <a href="https://academy.appgyver.com/categories/3-user-interface-and-design/contents/98-configuring-drawers-on-app-load">configuring drawers</a>.</p>
<p>This will make the sidemenu shown.</p>
<p><img class="article__image" src="http://img-fotki.yandex.ru/get/9766/14441195.32/0_8477e_dbe7889e_L.png" width="282" height="500" border="0"/></p>
<p>To make it look like in the picture you need to provide a
corresponding view with the list of menu items. Here it is defined
in <a href="https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/app/views/sidemenu/index.html"><code>app/views/sidemenu/index.html</code></a>.
This is pretty similar to the list of examples in the initial view. To make it function
we provide:</p>
<ul>
<li>a list of items and the corresponding view in <a href="https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/www/data/sidemenu.json"><code>www/data/sidemenu.json</code></a>;</li>
<li>data model in <a href="https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/app/models/sidemenu.js"><code>app/models/sidemenu.js</code></a>;</li>
<li>controller in <a href="https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/app/controllers/sidemenu.coffee"><code>app/controllers/sidemenu.coffee</code></a>.</li>
</ul>
<p>From the drawers perspective the most important piece of code
to study is the controller. It says to hide the opened drawer if you
tap the currently active menu item. Opening other menu items goes
differently; it replaces the current central view with some animation.</p>
<pre class="highlight"><code class="hljs coffeescript"><span class="hljs-keyword">if</span> item.active
  steroids.drawers.hide {}
<span class="hljs-keyword">else</span>
  webView = <span class="hljs-keyword">new</span> steroids.views.WebView {
    <span class="hljs-attribute">id</span>: item.id,
    <span class="hljs-attribute">location</span>: item.url
  }
  steroids.drawers.hide {
    <span class="hljs-attribute">center</span>: webView
  }
</code></pre>
<p>Hiding the currently opened drawer with <code>steroids.drawers.hide</code> simply
gets back the previously shown central view.</p>
<p>If you want to show a different page, you would also use <code>steroids.drawers.hide</code> but
with an additional <code>center</code> parameter to pass the needed view. This view has to be
created in advance with <code>steroids.views.WebView</code>.</p>
<p>Besides, such a view must be configured as preloaded in <a href="https://github.com/AppGyver/kitchensink/blob/ceacb0ea80799b1d81454e2e966b553b807fbadc/config/application.coffee#L31"><code>config/application.coffee</code></a>.</p>
<pre class="highlight"><code class="hljs coffeescript">steroids.config.preloads = [
  {
    <span class="hljs-attribute">id</span>: <span class="hljs-string">"settings"</span>
    <span class="hljs-attribute">location</span>: <span class="hljs-string">"http://localhost/views/settings/index.html"</span>
  }
]
</code></pre>
<p>Thus, with tapping on the <em>Settings</em> menu item you will get the settings
page shown.</p>
<p><img class="article__image" src="http://img-fotki.yandex.ru/get/9667/14441195.32/0_8477f_2aafe347_L.png" width="282" height="500" border="0"/></p>
<p>This page is empty yet. The upcoming posts will fill it in with something
interesting. Stay tuned :-)</p>
]]></description>
            <link>http://varya.me//en/posts/steroids-drawers</link>
            <guid isPermaLink="true">http://varya.me//en/posts/steroids-drawers</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Mon, 09 Jun 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Docpad with the taste of BEM]]></title>
            <description><![CDATA[<p>Let me present a stub for <strong>docpad-run</strong> project with
<strong>bem-built</strong> static assets. If you ever wanted to be
a generic blog holder equiped with nice and neat static
files, here we go.</p>
<excerpt/>

<h2 id="how-to-start">How to start</h2>
<p>You need install the docpad first. Follow their <a href="http://docpad.org/docs/install">Installation Guide</a>.</p>
<p>Then, the installation of the blog is super short and easy. Clone, fork or
copy from the <a href="https://github.com/varya/docpad-bem-stub">docpad-bem-stub repository</a>.
Then, go though the 3 installation steps:</p>
<pre class="highlight"><code class="hljs bash">npm install
./node_modules/bower-npm-install/bin/bower-npm-install
docpad run
</code></pre>
<p>With these 3 steps you will get:</p>
<ul>
<li>a local server with a generic docpad blog;</li>
<li><a href="http://bem.info/libs/bem-core/2.2.0/">bem-core</a> and <a href="http://bem.info/libs/bem-components/v2/">bem-components</a>
libraries of reusable CSS/JavaScript/templates code;</li>
<li>fully tuned static-build instructions which run on changes
in your source code;</li>
<li>initial blog structure.</li>
</ul>
<h2 id="how-to-write">How to write</h2>
<p>In the given structure you can write either pages or blog posts.
The posts are listed in the index page. Once you added a new
item, you can see it in this list and navigate to its page;
the docpad rebuilds from source automatically.</p>
<p>Place the pages as <code>*.html.md</code> files into <code>src/documents/pages</code>
directory. The posts are kept into <code>src/documents/posts</code>.</p>
<h2 id="how-to-develop-statics">How to develop statics</h2>
<p>The statics is developed with <a href="http://bem.info/">BEM</a>.
You can get CSS and JavaScript files for your pages in
<code>desktop.bundles</code> directory. The pages are built with blocks
from <code>desktop.blocks</code> folder.</p>
<p>The rebuild process for statics runs under docpad server.</p>
<p>Sometimes you may prefer to develop static pages separately.
For this run</p>
<pre class="highlight"><code class="hljs axapta">./node_modules/enb/bin/enb <span class="hljs-keyword">server</span>
</code></pre><p>You will get another server which rebuilds statics. It
produces static html files from <code>*.bemjson.js</code> files in
<code>desktop.bundles</code>. You can develop the layout inserting
json there and providing <code>BEMHTML</code> templates for the
corresponding block. Find the documentation about <code>BEMHTML</code>
here:</p>
<ul>
<li><a href="http://bem.info/libs/bem-core/2.2.0/templating/intro/">BEMHTML quick start</a></li>
</ul>
<p>For the same blocks you can provide <code>*.css</code> and <code>*.js</code> files
and get them built into pages.</p>
<h2 id="how-to-publish">How to publish</h2>
<p>The blog is tuned to be deployed on GitHub. Thus, your
repository has to be named as <code>&lt;username&gt;.github.com</code>. You
can develop in its <code>source</code> branch. For deploying on
<code>&lt;username&gt;.github.io</code> host run this command:</p>
<pre class="highlight"><code class="hljs bash">docpad deploy-ghpages
</code></pre>
<p>This will create <code>master</code> branch of the repository whose
source is linked to the host.</p>
<p>You can also attach your own domain to the blog like I did.
Also, it is possible to host your blog in differently named
repository. However this will make you to provide changes
on <code>docpad.coffee</code> configuration file.<br/>
Study <a href="https://pages.github.com/">Github Pages</a> to learn more.</p>
<h2 id="why-docpad-">Why Docpad?</h2>
<p>This blog had been running on Jekyll for a while. This was an
acceptable soltuion for a quick start. However with the growth
of the posts base I started to suffer from not very fast
rebuilds. Also, sometimes providing changes into the blog
layout was hard, mostly due to the limitations of <code>liquid</code>
templates.</p>
<p>I&#39;ve decided that <a href="http://docpad.org/">Docpad</a> should be much
better alternative. It is served as an npm package, possible to
be extended with plugins and has an active fast-growing
developers community.</p>
<p>The <code>docpad-bem-stub</code> gives you initial structure, from which
you already can write and publish. If you want to provide changes
into the build process, modify the templates or extend with
plugins, <a href="http://docpad.org/">learn at Docpad website</a>.</p>
<p>Moreover, <a href="http://stackoverflow.com/">Stackoverflow</a> indeed already
has an answer to almost all the questions you have. If not, create a new
one.</p>
<h2 id="why-bem-">Why BEM?</h2>
<p>BEM is a very flexible modular solution for frontend which
enables to develop reusable CSS and JavaScript components. Plus, some code
can be taken from their open source libraries.</p>
<p>You can learn a lot about BEM from <a href="/en/content">my articles and talks</a>
or at the <a href="http://bem.info/">official BEM site</a>.</p>
<h2 id="inside-about">Inside about</h2>
<p>Above I described all you need to know for using your blog. Below there
are a little more technical details on what is behind.</p>
<h3 id="enb">ENB</h3>
<p>I use <a href="https://github.com/enb-make/enb">enb</a> for building pages with block
components. This solution is preferable to bem-tools because of it is much
faster. When rebuilding pages on every change, this is sensetive.</p>
<h3 id="i-bem-js-and-modules">i-bem.js and modules</h3>
<p>I personally love that this solution brings <code>i-bem.js</code> library to the
project. Hope to demonstrate its amazing capabilities here in near future.
But before I stuff my blog with complex JavaScript components, you
can see some examples and very detailed explanations in <a href="http://bem.info/tutorials/bem-js-tutorial/">Step-by-step tutorial on
i-bem.js</a>.</p>
<p>Another JavaScript feature you can enjoy is <a href="/en/issues/ym-modular-system">YM modular system</a>.
These are JavaScript modules with asynchronious resolving.</p>
<h3 id="bemhtml">BEMHTML</h3>
<p>As mentioned above, <code>BEMHTML</code> is a templating solution. Being JavaScript-based,
these templates can be applied on both server and client side. There are
a couple of documents for a deeper dive into it here:</p>
<ul>
<li><a href="http://bem.info/libs/bem-core/2.2.0/templating/rationale/">BEMHTML templates description</a></li>
<li><a href="http://bem.info/libs/bem-core/2.2.0/templating/reference/">BEMHTML tutorial</a></li>
</ul>
<h3 id="bem-core-and-bem-components">bem-core and bem-components</h3>
<p>BEM is also nice for a possibility to borrow the components from libraries.
<code>docpad-bem-stub</code> uses 2 now available libraries:</p>
<ul>
<li><a href="http://bem.info/libs/bem-core/2.2.0/">bem-core</a></li>
<li><a href="http://bem.info/libs/bem-components/v2/">bem-components</a></li>
</ul>
<p>I hope to see more in the future.</p>
<h2 id="what-next-">What next?</h2>
<p>Indeed everything can be improved. These are my thoughts on how
to continue.</p>
<ul>
<li>detect changes in static files<br/>
Docpad watches over the changes in <code>src</code> directory. This means that
when developing statics you will not get the rebuild. I am thinking
on running <code>enb server</code> under <code>docpad run</code> and proxy. This maybe
better than watch over a lot of files in <code>desktop.blocks</code>, <code>desktop.bundles</code>
and all the libraries.</li>
<li>css preprocessors<br/>
The blog styles are in pure CSS now. But with a little
change into enb configuration we can learn it to build with
preprocessors.</li>
<li>fresh design<br/>
Creating a simple layout is the most difficult design task. Don&#39;t you agree?</li>
<li>nice initial posts<br/>
This is even harder than the desing tasks but I think the users feel much
more comfortable when getting a blog with predefined texts.</li>
</ul>
<p>If you feel your oats and want to do your bit, fork <a href="https://github.com/varya/docpad-bem-stub">the repository</a>
and start :-)</p>
]]></description>
            <link>http://varya.me//en/posts/docpad-with-bem-taste</link>
            <guid isPermaLink="true">http://varya.me//en/posts/docpad-with-bem-taste</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Wed, 04 Jun 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Мобильное приложение на HTML5 со штатным интерфейсом]]></title>
            <description><![CDATA[<p>Недавно я побывала на конференции <a href="http://2014.front-trends.com/">Front Trends 2014</a>
в Варшаве. Конференция очень крутая, обязательно посетите её в следующем году.
У них всегда интересная основная программа, и кроме неё есть ещё
мини-доклады от всех желающих. В этом году одним из таких докладов был мой,
о фреймворке и инструментах для разработки HTML5/JavaScript мобильных
приложений <a href="http://www.appgyver.com/steroids">Steroids</a>.
Если вы не были на конференции, то можете прочесть мою презентацию в тексте.</p>
<excerpt/>

<div class="slide">
  <iframe class="slide__frame"
    src="http://varya.me/start-with-steroids/?full#Cover">
  </iframe>
</div>

<p>Я совсем новичок в разработке мобильных приложений, но всё равно решилась
показать, как пользоваться Steroids, потому что благодаря ему я смогла сделать
приложение с системным интерфейсом (native UI) и безболезненно пройти через
весь цикл разработки за считанные минуты.</p>
<div class="slide">
  <iframe class="slide__frame"
    src="http://varya.me/start-with-steroids/?full#summary">
  </iframe>
</div>

<p>Инструменты Steroids — это пакет с command line интерфейсом. Вместе с ним вы получите
JavaScript-фреймворк Steroids. А также инструменты обеспечат вам сборку проекта,
удобный процесс разработки, отладки и релиза. Всё написано под NodeJS, так что
потребуется его установить.</p>
<div class="slide">
  <iframe class="slide__frame"
    src="http://varya.me/start-with-steroids/?full#3">
  </iframe>
</div>

<p>Нужна версия <code>0.10.25</code>. В инструкции <a href="http://academy.appgyver.com/categories/1/contents/1">Installation and Setup
Guide</a>
подробно написано, как устанавливать.</p>
<div class="slide">
  <iframe class="slide__frame"
    src="http://varya.me/start-with-steroids/?full#4">
  </iframe>
</div>

<p>Самая первая команда, которой вы воспользуетесь, — это <code>steroids create</code>.
Затем, в получившейся папке проекта наберите <code>steroids connect --watch</code> —
запустится процесс steroids. Флаг <code>--watch</code> нужен, чтобы Steroids отслеживал
изменения файлов и каждый раз пересобирал проект и обновлял его на подключенных
устройствах.</p>
<p>Вы можете подключить к проекту реальный телефон. После запуска <code>steroids connect</code>
откроется окно браузера с QR-кодом. Считайте этот QR-код мобильным приложением
<code>AppGyver Scanner</code> — и проект окажется в вашем телефоне (а кроме того — будет
обновляться).</p>
<div style="text-align:center;">
<a href="https://itunes.apple.com/us/app/appgyver-scanner/id575076515?mt=8"
target="_blank"><img alt="Appstore" class="appstore_icon"
src="https://share.appgyver.com/assets/appstore-df950585b54bd081a7826913fc715cd4.png"></a>
<a href="https://play.google.com/store/apps/details?id=com.appgyver.android&amp;feature=nav_result#?t=W251bGwsMSwxLDMsImNvbS5hcHBneXZlci5hbmRyb2lkIl0."
target="_blank"><img alt="Googleplay" class="appstore_icon"
src="https://share.appgyver.com/assets/googleplay-2cef882d62e402fbdbfe8cdac5794069.png"></a>
</div>

<p>Другой способ — открыть проект в Simulator. Для этого наберите <code>simulator</code>
в окне терминала, где запускали <code>steroids connect</code>.</p>
<p>Теперь можете изменить исходный код приложения. Например, напишите
свой текст в файле <code>www/index.html</code>. После этого можете проверить,
что приложение в подключенном телефоне или в симуляторе изменилось.</p>
<p>Научиться, как сделать более серьезные изменения в проекте, вы
можете из примеров и туториалов. Запустите <code>steroids generate</code>, и
получите нужный код.</p>
<div class="slide">
  <iframe class="slide__frame"
    src="http://varya.me/start-with-steroids/?full#5">
  </iframe>
</div>

<p>Можете смотреть, как устроены эти примеры, учиться по
<a href="http://academy.appgyver.com/">туториалам</a> и
<a href="http://docs.appgyver.com/en/stable/index.html">API документации</a>.
Дальше я покажу как использовать в вашем приложении
некоторые штатные элементы интерфейса, то есть
писать на HTML5/JavaScript приложение с <em>native UI</em>.</p>
<div class="slide">
  <iframe class="slide__frame"
    src="http://varya.me/start-with-steroids/?full#examples-list">
  </iframe>
</div>

<p>Давайте начнем с табов.</p>
<div class="slide">
  <iframe class="slide__frame"
    src="http://varya.me/start-with-steroids/?full#7">
  </iframe>
</div>

<p>Вы можете найти закомментированный пример использования
табов в файле <code>config/application.coffee</code>. Это список табов
с их иконками и ссылками, на которые они ведут.</p>
<p>В моём приложении я создаю 3 таба для следующих страниц:</p>
<ul>
<li>index.html</li>
<li>notificationExample.html</li>
<li>knowledge.html</li>
</ul>
<pre class="highlight"><code class="hljs coffeescript">steroids.config.tabBar.enabled = <span class="hljs-literal">true</span>
steroids.config.tabBar.tabs = [
  {
    <span class="hljs-attribute">title</span>: <span class="hljs-string">"Index"</span>
    <span class="hljs-attribute">icon</span>: <span class="hljs-string">"icons/pill@2x.png"</span>
    <span class="hljs-attribute">location</span>: <span class="hljs-string">"http://localhost/index.html"</span>
  },
  {
    <span class="hljs-attribute">title</span>: <span class="hljs-string">"Notifications"</span>
    <span class="hljs-attribute">icon</span>: <span class="hljs-string">"icons/bell.png"</span>
    <span class="hljs-attribute">location</span>: <span class="hljs-string">"http://localhost/notificationExample.html"</span>
  },
  {
    <span class="hljs-attribute">title</span>: <span class="hljs-string">"Knowledge base"</span>
    <span class="hljs-attribute">icon</span>: <span class="hljs-string">"icons/coding.png"</span>
    <span class="hljs-attribute">location</span>: <span class="hljs-string">"http://localhost/knowledge.html"</span>
  }
]
</code></pre>
<p>Положите html-файлы этих страниц в папку <code>www</code>. Пока они могут
быть пустыми. Также не забудьте об иконках, можете взять из моего
репозитория всю папку <a href="https://github.com/varya/steroids-fronttrends2014/tree/master/www/icons">icon
folder</a>.</p>
<p>После того как все изменения будут сделаны, подождите пересборки и
убедитесь в результате.</p>
<div style="text-align:center;">
<img src="http://img-fotki.yandex.ru/get/9088/14441195.32/0_84262_ae854cb8_orig.png" width="340" height="89" border="0" title="" alt=""/>
</div>

<p>Дальше можно поиграть с нотификациями.</p>
<div class="slide">
  <iframe class="slide__frame"
    src="http://varya.me/start-with-steroids/?full#8">
  </iframe>
</div>

<p>Разместите код этих кнопок внутри тега <code>&lt;body&gt;</code> на странице
<code>www/notificationExample.html</code>.</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">button
</span>  <span class="hljs-attribute">class</span>=<span class="hljs-value">"button button-block"</span>
  <span class="hljs-attribute">ontouchend</span>=<span class="hljs-value">"showAlert()"</span>&gt;</span>Show alert dialogue<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">button
</span>  <span class="hljs-attribute">class</span>=<span class="hljs-value">"button button-block"</span>
  <span class="hljs-attribute">ontouchend</span>=<span class="hljs-value">"showConfirm()"</span>&gt;</span>Show confirm dialogue<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">button
</span>  <span class="hljs-attribute">class</span>=<span class="hljs-value">"button button-block"</span>
  <span class="hljs-attribute">ontouchend</span>=<span class="hljs-value">"showPrompt()"</span>&gt;</span>Show prompt dialogue<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">button
</span>  <span class="hljs-attribute">class</span>=<span class="hljs-value">"button button-block"</span>
  <span class="hljs-attribute">ontouchend</span>=<span class="hljs-value">"vibrate()"</span>&gt;</span>Vibrate the device<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
</code></pre>
<p>Кнопки реагируют на прикосновения пользователя и запускают
различные JavaScript-функции. Чтобы сделать страницу работающей,
нужно задать эти функции в <code>&lt;head&gt;</code> или <code>*.js</code> файле страницы.
Каждая из них иллюстрирует работу своего вида нотификации, такого
как:
a kind of notification which are:</p>
<ul>
<li><code>navigator.notification.alert</code></li>
<li><code>navigator.notification.confirm</code></li>
<li><code>navigator.notification.prompt</code></li>
<li><code>navigator.notification.vibrate</code></li>
</ul>
<p>Код функций можете взять
<a href="https://github.com/varya/steroids-fronttrends2014/blob/master/www/notificationExample.html#L15">из моего репозитория</a>.</p>
<p>Теперь вы можете перейти на эту страницу по соответствующему
табу и увидеть, как работает каждый тип нотификации.</p>
<p>Следующий системный элемент — кнопка на навигационной панели
(navigation bar).</p>
<div class="slide">
  <iframe class="slide__frame"
    src="http://varya.me/start-with-steroids/?full#9">
  </iframe>
</div>

<p>Навигационная панель может быть изменена при помощи JavaScript-хелперов
фреймворка Steroids. Если вы хотите сделать её одинаковой для всех страниц
приложения, то разместите код в файле <code>www/javascripts/application.js</code>,
который подключен ко всем <code>*.html</code> файлам.</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">var</span> loginButton = <span class="hljs-keyword">new</span> steroids.buttons.NavigationBarButton();
loginButton.title = <span class="hljs-string">"the Button"</span>;

loginButton.onTap = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    navigator.notification.alert(
        <span class="hljs-string">'You tapped the button!'</span>,
        <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>},
        <span class="hljs-string">'the Alert'</span>,
        <span class="hljs-string">'I did!'</span>
    );
}

steroids.view.navigationBar.update({
    buttons: {
      right: [loginButton]
    }
})
</code></pre>
<p>Этот код вставит кнопку в правую часть навигационной панели.
Касание кнопки запустит нотификацию, уже знакомую вам по предыдущему
примеру.</p>
<div style="text-align:center;">
<img src="http://img-fotki.yandex.ru/get/9115/14441195.32/0_84264_7f27d435_L.png" width="282" height="500" border="0" title="" alt=""/>
</div>

<p>И последний пример штатного интерфейса в этом приложении
— модальное окно.</p>
<div class="slide">
  <iframe class="slide__frame"
    src="http://varya.me/start-with-steroids/?full#10">
  </iframe>
</div>

<p>Разместите эту кнопку в файле <code>www/index.html</code>:</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">a
</span>  <span class="hljs-attribute">class</span>=<span class="hljs-value">"button button-block"</span>
  <span class="hljs-attribute">ontouchend</span>=<span class="hljs-value">"showModal()"</span>&gt;</span>Open modal<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
</code></pre>
<p>И определите функцию <code>showModal</code>, которая открывает модальное
окно с соответствующим содержанием.</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showModal</span><span class="hljs-params">()</span> {</span>
  <span class="hljs-keyword">var</span> webView =
    <span class="hljs-keyword">new</span> steroids.views.WebView(<span class="hljs-string">"/views/modalExample/show.html"</span>);
  steroids.modal.show(webView);
}
</code></pre>
<p>Что показывать в модальном окне, должно быть написано в файле
<code>app/views/modalExample/show.html</code>. Кстати, не забудьте, что там
должна быть кнопка закрывания модального окна. Чтобы всё прошло
быстрее, позаимствуйте
<a href="https://github.com/varya/steroids-fronttrends2014/blob/master/app/views/modalExample/show.html">код из репозитория приложения</a>.</p>
<p>С этими и <a href="http://docs.appgyver.com/en/stable/steroids_Steroids%20Native%20UI_index.md.html#Steroids%C2%A0Native%C2%A0UI">другими элементами интерфейса</a>
вы можете сделать приложение с системным интерфейсом, которое
будет выглядеть натурально на том устройстве, на котором запускается
приложение.</p>
<p>Когда приложение закончено (или даже в процессе), вы можете захотеть
показать его другу, клиенту или даже маме.</p>
<div class="slide">
  <iframe class="slide__frame"
    src="http://varya.me/start-with-steroids/?full#sharing">
  </iframe>
</div>

<p>Можно воспользоваться QR-кодом, упоминаемым в начале статьи. Он
принесет код с вашего компьютера на любое устройство. Но вы оба должны
быть подключены к одной сети.</p>
<p>Если вы хотите показать приложение удаленно, разместите код в облаке.
Для этого есть команда <code>steroids deploy</code>. В результате вы тоже получите
страницу с QR-кодом. Его можно считать при помощи <code>AppGyver Scaner</code> и
получить в своём телефоне приложение прямо из облака.</p>
<p>Вы можете делиться всеми своими приложениями из облака. А также
настраивать их и собирать релизы. Всё это делается через web-интерфейс
<a href="https://cloud.appgyver.com/applications">cloud.appgyver.com</a>.</p>
<p>Отсюда же приложения можно отправлять в AppStore и GooglePlay.</p>
<div style="text-align:center;">
<img src="http://img-fotki.yandex.ru/get/9062/14441195.32/0_84265_d03d686e_orig.png" width="500" height="327" border="0" title="" alt=""/>
</div>

<p>Видите, это просто. Настолько просто, что даже новичок может не только
разработать приложение, но и сделать об этом презентацию с живым кодом
на конференции.</p>
<div class="slide">
  <iframe class="slide__frame"
    src="http://varya.me/start-with-steroids/?full#links">
  </iframe>
</div>

<p>Узнать больше о Steroids и Cordova (в основе Steroids лежит PhoneGap)
можно в <a href="http://academy.appgyver.com/">AppGyver Academy</a>. Там есть:</p>
<ul>
<li>подробные обучающие материалы,</li>
<li>документация,</li>
<li>сообщество разработчиков.</li>
</ul>
<p>И, конечно, вы можете читать <a href="/ru/posts">этот блог</a>. Я собираюсь
делиться своими следующими открытиями относительно Steroids в ближайшее время :-)</p>
]]></description>
            <link>http://varya.me//ru/posts/html5-mobile-app-width-native-ui</link>
            <guid isPermaLink="true">http://varya.me//ru/posts/html5-mobile-app-width-native-ui</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Wed, 28 May 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[HTML5 mobile apps with native UI on Steroids]]></title>
            <description><![CDATA[<p>Recently I attended <a href="http://2014.front-trends.com/">Front Trends 2014</a> in Warsaw.
This is an awesome conference which you should (no, definitely have to!) attend
in 2015. Besides incredible main programm Front Trends provides a set of Lighting Talks.
This year I was a part of it presenting <a href="http://www.appgyver.com/steroids">Steroids</a>,
a framework and a toolkit for developing HTML5 mobile apps. If you did not have
a chance to hear it, this offline text presentation is for you.<excerpt/></p>
<div class="slide">
  <iframe class="slide__frame" scrolling="no"
    src="http://varya.me/start-with-steroids/?full#Cover">
  </iframe>
</div>

<p>Being an absolute newbie in developing mobile apps I decided to showcase
Steroids because it enables me to create pretty native-looking application
and smoothly go through the developing and releasing flow in a few minutes.</p>
<div class="slide">
  <iframe class="slide__frame" scrolling="no"
    src="http://varya.me/start-with-steroids/?full#summary">
  </iframe>
</div>

<p>The Steroids toolkit is a CLI; it brings Steroids JavaScript framewrok into
your project and takes care of building an app, developing flow, debugging
and releasing. It is based on NodeJs, so you have to have it installed.</p>
<div class="slide">
  <iframe class="slide__frame" scrolling="no"
    src="http://varya.me/start-with-steroids/?full#3">
  </iframe>
</div>

<p>The required version for now is <code>0.10.25</code>. Follow the <a href="http://academy.appgyver.com/categories/1/contents/1">Installation and Setup
Guide</a>.</p>
<div class="slide">
  <iframe class="slide__frame" scrolling="no"
    src="http://varya.me/start-with-steroids/?full#4">
  </iframe>
</div>

<p>Your very first start would be creating a project using <code>steroids create</code>
command. Then, typing <code>steroids connect --watch</code> in the gotten project
folder launches steroids process. The <code>--watch</code> flag as you can guess tells
Steroids to watch over the file changes, rebuild the app and push the results
to the connected devices.</p>
<p>You can connect a physical smartphone to the project. After running
<code>steroids connect</code> you get a web page with a QR code opened in your browser.
Use <code>AppGyver Scanner</code> to read this QR code, it will bring the application
into your phone and keep it connected.</p>
<div style="text-align:center;">
<a href="https://itunes.apple.com/us/app/appgyver-scanner/id575076515?mt=8"
target="_blank"><img alt="Appstore" class="appstore_icon"
src="https://share.appgyver.com/assets/appstore-df950585b54bd081a7826913fc715cd4.png"></a>
<a href="https://play.google.com/store/apps/details?id=com.appgyver.android&amp;feature=nav_result#?t=W251bGwsMSwxLDMsImNvbS5hcHBneXZlci5hbmRyb2lkIl0."
target="_blank"><img alt="Googleplay" class="appstore_icon"
src="https://share.appgyver.com/assets/googleplay-2cef882d62e402fbdbfe8cdac5794069.png"></a>
</div>

<p>Another way to watch the app is to bring it into a desktop simulator.
To do this, type <code>simulator</code> in the terminal wich launched
<code>steroids connect</code>.</p>
<p>You can change the application source files. E.g. edit a text
in <code>www/index.html</code> and make sure that the app in the connected device
or in the simulator has been changed.</p>
<p>To provide more powerful changes you can learn from the examples
and tutorials. Run <code>steroids generate</code> command and get the relevant
code.</p>
<div class="slide">
  <iframe class="slide__frame" scrolling="no"
    src="http://varya.me/start-with-steroids/?full#5">
  </iframe>
</div>

<p>You can learn from this code examples, from <a href="http://academy.appgyver.com/">tutorials</a>
and <a href="http://docs.appgyver.com/en/stable/index.html">API Docs</a>. 
Below I demonstrated some of the features which enable
to use <em>native UI</em>.</p>
<div class="slide">
  <iframe class="slide__frame" scrolling="no"
    src="http://varya.me/start-with-steroids/?full#examples-list">
  </iframe>
</div>

<p>Let us start with showing the native tabs.</p>
<div class="slide">
  <iframe class="slide__frame" scrolling="no"
    src="http://varya.me/start-with-steroids/?full#7">
  </iframe>
</div>

<p>In the <code>config/application.coffee</code> file you can find a commented
example of defining a list of tabs with their icons and
locations (URLs) they lead to.</p>
<p>In my application I created 3 tabs. They are for</p>
<ul>
<li>index.html</li>
<li>notificationExample.html</li>
<li>knowledge.html</li>
</ul>
<pre class="highlight"><code class="hljs coffeescript">steroids.config.tabBar.enabled = <span class="hljs-literal">true</span>
steroids.config.tabBar.tabs = [
  {
    <span class="hljs-attribute">title</span>: <span class="hljs-string">"Index"</span>
    <span class="hljs-attribute">icon</span>: <span class="hljs-string">"icons/pill@2x.png"</span>
    <span class="hljs-attribute">location</span>: <span class="hljs-string">"http://localhost/index.html"</span>
  },
  {
    <span class="hljs-attribute">title</span>: <span class="hljs-string">"Notifications"</span>
    <span class="hljs-attribute">icon</span>: <span class="hljs-string">"icons/bell.png"</span>
    <span class="hljs-attribute">location</span>: <span class="hljs-string">"http://localhost/notificationExample.html"</span>
  },
  {
    <span class="hljs-attribute">title</span>: <span class="hljs-string">"Knowledge base"</span>
    <span class="hljs-attribute">icon</span>: <span class="hljs-string">"icons/coding.png"</span>
    <span class="hljs-attribute">location</span>: <span class="hljs-string">"http://localhost/knowledge.html"</span>
  }
]
</code></pre>
<p>Place the pages into <code>www</code> directory and keep them empty yet.
Do not forget the icons. You can borrow the whole <a href="https://github.com/varya/steroids-fronttrends2014/tree/master/www/icons">icon
folder</a>.</p>
<p>After making the change wait for rebuild and check.</p>
<div style="text-align:center;">
<img src="http://img-fotki.yandex.ru/get/9088/14441195.32/0_84262_ae854cb8_orig.png" width="340" height="89" border="0" title="" alt=""/>
</div>

<p>Next, we can play with notifications.</p>
<div class="slide">
  <iframe class="slide__frame" scrolling="no"
    src="http://varya.me/start-with-steroids/?full#8">
  </iframe>
</div>

<p>Place these buttons inside the <code>&lt;body&gt;</code> container of the
<code>www/notificationExample.html</code> file.</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">button
</span>  <span class="hljs-attribute">class</span>=<span class="hljs-value">"button button-block"</span>
  <span class="hljs-attribute">ontouchend</span>=<span class="hljs-value">"showAlert()"</span>&gt;</span>Show alert dialogue<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">button
</span>  <span class="hljs-attribute">class</span>=<span class="hljs-value">"button button-block"</span>
  <span class="hljs-attribute">ontouchend</span>=<span class="hljs-value">"showConfirm()"</span>&gt;</span>Show confirm dialogue<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">button
</span>  <span class="hljs-attribute">class</span>=<span class="hljs-value">"button button-block"</span>
  <span class="hljs-attribute">ontouchend</span>=<span class="hljs-value">"showPrompt()"</span>&gt;</span>Show prompt dialogue<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">button
</span>  <span class="hljs-attribute">class</span>=<span class="hljs-value">"button button-block"</span>
  <span class="hljs-attribute">ontouchend</span>=<span class="hljs-value">"vibrate()"</span>&gt;</span>Vibrate the device<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>
</code></pre>
<p>As you can see, they run different JavaScript functions on
touch. To finish the page you need to define these functions
in the <code>&lt;head&gt;</code> or linked <code>*.js</code> file. Each function demonstrates
a kind of notification which are:</p>
<ul>
<li><code>navigator.notification.alert</code></li>
<li><code>navigator.notification.confirm</code></li>
<li><code>navigator.notification.prompt</code></li>
<li><code>navigator.notification.vibrate</code></li>
</ul>
<p>Borrow the JavaScript code from <a href="https://github.com/varya/steroids-fronttrends2014/blob/master/www/notificationExample.html#L15">my repo</a>.</p>
<p>Now you can navigate to this page using the tabs and try
each type of notification with tapping.</p>
<p>Another native element could be a button in the application navigation
bar.</p>
<div class="slide">
  <iframe class="slide__frame" scrolling="no"
    src="http://varya.me/start-with-steroids/?full#9">
  </iframe>
</div>

<p>The navigation bar can be modified with JavaScript on Steroids.
If you want it to be the same across all the application pages,
provide this JavaScript in the <code>www/javascripts/application.js</code> file
which is linked to all the <code>*.html</code> files.</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">var</span> loginButton = <span class="hljs-keyword">new</span> steroids.buttons.NavigationBarButton();
loginButton.title = <span class="hljs-string">"the Button"</span>;

loginButton.onTap = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
    navigator.notification.alert(
        <span class="hljs-string">'You tapped the button!'</span>,
        <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>{</span>},
        <span class="hljs-string">'the Alert'</span>,
        <span class="hljs-string">'I did!'</span>
    );
}

steroids.view.navigationBar.update({
    buttons: {
      right: [loginButton]
    }
})
</code></pre>
<p>This will bring the button to the right side of the
navigation bar. Tapping on it you can see a notification; one
of those you studied recently.</p>
<div style="text-align:center;">
<img src="http://img-fotki.yandex.ru/get/9115/14441195.32/0_84264_7f27d435_L.png" width="282" height="500" border="0" title="" alt=""/>
</div>

<p>The last of native UI examples in this app is showing
modal views.</p>
<div class="slide">
  <iframe class="slide__frame" scrolling="no"
    src="http://varya.me/start-with-steroids/?full#10">
  </iframe>
</div>

<p>Add this button into <code>www/index.html</code>:</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">a
</span>  <span class="hljs-attribute">class</span>=<span class="hljs-value">"button button-block"</span>
  <span class="hljs-attribute">ontouchend</span>=<span class="hljs-value">"showModal()"</span>&gt;</span>Open modal<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span>
</code></pre>
<p>And code <code>showModal</code> method to open a view as a modal.</p>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showModal</span><span class="hljs-params">()</span> {</span>
  <span class="hljs-keyword">var</span> webView =
    <span class="hljs-keyword">new</span> steroids.views.WebView(<span class="hljs-string">"/views/modalExample/show.html"</span>);
  steroids.modal.show(webView);
}
</code></pre>
<p>The related view is a piece of html, which you should place into
<code>app/views/modalExample/show.html</code>. BTW, it has to have an interface
element closing the view. To make the process faster, pick up the
<a href="https://github.com/varya/steroids-fronttrends2014/blob/master/app/views/modalExample/show.html">code from the application repo</a>.</p>
<p>With this and <a href="http://docs.appgyver.com/en/stable/steroids_Steroids%20Native%20UI_index.md.html#Steroids%C2%A0Native%C2%A0UI">other UI features</a>
you can build a mobile interface which looks absolutely native for a
device where you application runs.</p>
<p>Once finished coding (or even in process) you may need to show the
application to your friend, client or Mom.</p>
<div class="slide">
  <iframe class="slide__frame" scrolling="no"
    src="http://varya.me/start-with-steroids/?full#sharing">
  </iframe>
</div>

<p>You can use the QR code from the beginning of our session which can
bring your application to any any device directly from your computer.
However this only will work if them both are connected to the same
network.</p>
<p>If you want to share with someone remotely, deploy your app into the cloud.
The <code>steroids deploy</code> command serves for it. As a result you get
a page (also with a QR code) which can be scanned with AppGyver Scaner on
a phone and thus your pal get the same app from the cloud.</p>
<p>All your applications in the cloud can be shared, tuned and built with
web interface at <a href="https://cloud.appgyver.com/applications">cloud.appgyver.com</a>.</p>
<p>From there you also push the app into AppStore and GooglePlay.</p>
<div style="text-align:center;">
<img src="http://img-fotki.yandex.ru/get/9062/14441195.32/0_84265_d03d686e_orig.png" width="500" height="327" border="0" title="" alt=""/>
</div>

<p>This is easy. As easy that a newbie can develop an app in a few minutes
and show you the how-to.</p>
<div class="slide">
  <iframe class="slide__frame" scrolling="no"
    src="http://varya.me/start-with-steroids/?full#links">
  </iframe>
</div>

<p>You can learn more about Steroids and Cordova (Steroids is based on PhoneGap)
at the <a href="http://academy.appgyver.com/">AppGyver Academy</a> where you find:</p>
<ul>
<li>detailed tutorials,</li>
<li>documentation,</li>
<li>big community of devs.</li>
</ul>
<p>And, of course, you can read <a href="/en/posts/">this blog</a>. I promise to share my next findings
regarding Steroids soon :-)</p>
]]></description>
            <link>http://varya.me//en/posts/html5-mobile-app-width-native-ui</link>
            <guid isPermaLink="true">http://varya.me//en/posts/html5-mobile-app-width-native-ui</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Mon, 26 May 2014 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Switching to bem-core#v2]]></title>
            <description><![CDATA[<p>The <code>bem-core</code> library goes futher and there already is <code>2.0.0</code> version
available. This blog was safely switched to the new major version with
<a href="https://github.com/varya/varya.github.com/commit/f21f810b7cb4e16206ef3d088a8b2c38b615f8f3">some diff to the
code</a>.
Now so can do you. Careful examination of the version changelog will help you
with it. Look how I did this.<excerpt/></p>
<p>When a new bem library version is released its changelog is published on the
official BEM website. You can examine the <a href="http://bem.info/libs/bem-core/2.0.0/changelog/">list of changes for bem-core
2.0.0</a>.</p>
<p>The changelog is divided into 3 parts: breaking, marjor and minor changes.</p>
<p>Breaking changes takes most of your attention. As you can see, they declare
removing of some basic methods as well as hosting some code in different
repositories. Thus, if you used some of the listed methods, the switch pushes
you to refactor your code a little bit.</p>
<p>The major changes are less critical but might case some code changes as well. In
this version BEM team provided <a href="https://github.com/bem/bem-core/issues/382">new syntax for defining the blocks in
JavaScript</a>. This change is not
breaking as the old syntax still works. However it is nice to go through a small
refactoring and switch to the new type of module declaration keeping your code
neat for the future.</p>
<p>The same goes for the <a href="https://github.com/bem/bem-core/issues/410">change to DOM
helpers</a>. With getting the context
as a result of using those helpers you can get rid of a couple of lines per
block.</p>
<p>Summing it up, switcing to the new version should be your happiest time as you
have a ready-made excuse to dive into refactoring.</p>
]]></description>
            <link>http://varya.me//en/issues/switching-to-bem-core-2</link>
            <guid isPermaLink="true">http://varya.me//en/issues/switching-to-bem-core-2</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Thu, 15 May 2014 20:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[BEML - an HTML preprocessor for BEM]]></title>
            <description><![CDATA[<p>Depending on a project people prefer different ways to adapt BEM.
This results 
into a range of tools for our choice. Today, I am translating Maxim Shkalin&#39;s
description of the <code>BEML</code> templating pre-processor.</p>
<p>Willing to lighten the development with BEM I propose a tiny extension for the
HTML syntax (yes, I used to writ all those long CSS classes manually). As the
name <code>BEMHTML</code> is greedily taken by the Yandex guys, let us call it <code>BEML</code>.<excerpt/></p>
<h2 id="objective">Objective</h2>
<ol>
<li>Smooth learning curve<br/>
HTML-syntax with no need to transform one language into another.</li>
<li>Portability<br/>
The tool has to be easy to use with other languages.</li>
<li>Compatiblity with template engines<br/>
Instead of trying to replace them.</li>
<li>Simplicity<br/>
Easy to use at any project.</li>
</ol>
<p>It might be my habit, but I do not see the need to transform JSON into HTML.
BEMJSON page description usually looks like spaghetti and is very hard to read
due to its syntax. Also I do not think that HTML is wrong. AngularJS has already
shown that HTML can be much flexible than now. Thus, I decided to follow this
example.</p>
<p>Moreover, there is anothe problem with using BEMHTML. You need Node.js running
for your backend; or use another JavaScript engine for PHP or Rython with dirty
hacks like V8JS or PyV8. The otehr way round could be preparation of a rendered
template, but this sounds even more unnatural.</p>
<p>It would be nice to have a JavaScript-preprocessor and a relative Grunt task
which can be used for creating the prototypes. Then, with transforming to PHP
you can use the same templates in the backend.</p>
<h2 id="concept">Concept</h2>
<p>I had a lot of ideas how to extend HTML with inheritance, includes and loops.
But finally I cut them off. It would be too complex to support and then provide
the portability. Besides, there is a lot of other template engines; I would
rather enter into alliance with them than to compete. Finally I got not a
template engine but a preprocessor (or postprocessor) to the current one.</p>
<p>The scenario is the following. First, create BEML markup using your template
engine. Then, past it not to the client but to the post-processor which turns
BEM syntax into HTML. Funally the HTML goes to the client.</p>
<p>Or, there is a faster way for the braves. You can change your template with
pre-processor which turns BEM attributes into HTML, cache it and use this
chached copy with your dear template engine. Indeed, the pre-processor does not
touch the template engine code.</p>
<h2 id="syntax">Syntax</h2>
<p>This is very simple, you just use 4 more attributes like <code>block</code>, <code>elem</code>, <code>mod</code>
and <code>mix</code>. I suppose it is clear what each of them is responsible for. For the
complex values you can use light JSON dialect with no quotation marks and
optional curly braces. Finally the tool turns this code:</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">block</span>=<span class="hljs-value">"b-animals"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">elem</span>=<span class="hljs-value">"cat"</span> <span class="hljs-attribute">mod</span>=<span class="hljs-value">"size:big, color:red"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p>into the following HTML.</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"b-animals"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"b-animals__cat
              b-animals__cat_size_big
              b-animals__cat_color_red
              "</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
</code></pre>
<p>Much readable.</p>
<p>Full information about the syntax you can learn from the <a href="https://github.com/zenwalker/node-beml">README on GitHub</a>.</p>
<h2 id="try-now">Try now</h2>
<pre class="highlight"><code class="hljs bash">npm install beml
</code></pre>
<pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">var</span> beml = <span class="hljs-built_in">require</span>(<span class="hljs-string">'beml'</span>);
<span class="hljs-keyword">var</span> template = <span class="hljs-string">'&lt;div block="b-block" mod="size:big"&gt;&lt;/div&gt;'</span>;

beml.process(template, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err, html)</span> {</span>
  console.log(html);
});
</code></pre>
<h2 id="author">Author</h2>
<p>This article is a translaton.
The original article by Maxim Shkalin was <a href="http://zenwalker.ru/blog/2014/1/html-preprocessor-for-bem.html">posted in his
blog</a>. Follow him in the social networks:
<a class="link social-ico__ico social-ico__ico_in-text social-ico__ico_type_twitter"
href="https://twitter.com/zenwalker2/" target="_blank"></a>
<a class="link social-ico__ico social-ico__ico_in-text social-ico__ico_type_github"
href="https://github.com/zenwalker/" target="_blank"></a></p>
]]></description>
            <link>http://varya.me//en/issues/beml-html-preprocessor</link>
            <guid isPermaLink="true">http://varya.me//en/issues/beml-html-preprocessor</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Thu, 08 May 2014 20:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Мобильное приложение на Steroids]]></title>
            <description><![CDATA[<p>На днях я написала своё первое мобильное приложение. Суммарно это заняло всего
пару часов, и всё благодаря фреймворку
<a href="http://www.appgyver.com/steroids">Steroids</a> от AppGyver. С его помощью делать
гибридные приложения (это когда HTML5/JavaScript внутри) очень легко, а
инструменты <code>Steroids</code> позволяют легко деплоить приложение и делиться им с
друзьями.<excerpt/></p>
<h3 id="-">Легко посмотреть приложение</h3>
<p>Приложение у меня пока &quot;игрушечное&quot; — это всего одна страница, где озвучены
случайные числительные на финском языке.</p>
<div style="text-align:center;">
<img
src="http://img-fotki.yandex.ru/get/9827/14441195.30/0_81ae7_60ff43b1_L.png"
width="282" height="500" title="" alt="" border="0"/>
</div>

<p>Сейчас увидеть работающее приложение в телефоне можно только через <code>Appgyver
Scaner</code> — вспомогательную программу для обмена Steroids-based мобильными
приложениями до релиза. Поставьте сейчас, чтобы позже загрузить моё приложение:</p>
<div style="text-align:center;">
<a href="https://itunes.apple.com/us/app/appgyver-scanner/id575076515?mt=8"
target="_blank"><img alt="Appstore" class="appstore_icon"
src="https://share.appgyver.com/assets/appstore-df950585b54bd081a7826913fc715cd4.png"></a>
<a href="https://play.google.com/store/apps/details?id=com.appgyver.android&amp;feature=nav_result#?t=W251bGwsMSwxLDMsImNvbS5hcHBneXZlci5hbmRyb2lkIl0."
target="_blank"><img alt="Googleplay" class="appstore_icon"
src="https://share.appgyver.com/assets/googleplay-2cef882d62e402fbdbfe8cdac5794069.png"></a>
</div>

<p>Теперь вы можете открыть в компьютере эту
<a href="http://bit.ly/finnish-counting-001">страницу с QR-кодом</a>. Отсканируйте QR-код
при помощи
свежеустановленного AppGyver Scaner, и моё приложение загрузится к вам в
телефон.</p>
<p>Я сознательно не релизила пока приложение. Во-первых, оно ещё сырое. А
во-вторых, хочу, чтобы вы увидели как легко поделиться готовящимся
приложением с другими, причем на любом этапе разработки.</p>
<h3 id="-dev-">Запустить dev-версию</h3>
<p>Код приложения открытый, хостится на Github:
<a href="https://github.com/varya/finnish-counting">varya/finnish-counting</a>. Чтобы
развернуть проект у себя на машине, понадобится npm-пакет <code>steroids</code>:</p>
<pre class="highlight"><code class="hljs cmake">npm <span class="hljs-keyword">install</span> steroids -g
</code></pre><p>Если до этого npm-пакеты на машину не устанавливались, то придется пройти через
все шаги <a href="http://academy.appgyver.com/categories/1/contents/1">инструкции по
установке</a>.</p>
<p>Затем нужно склонировать код проекта и установить зависимости:</p>
<pre class="highlight"><code class="hljs lasso">git clone git@github<span class="hljs-built_in">.</span>com:varya/finnish<span class="hljs-attribute">-counting</span><span class="hljs-built_in">.</span>git <span class="hljs-attribute">-b</span> develop
cd finnish<span class="hljs-attribute">-counting</span>
npm install
</code></pre><p>Для начала работы с проектом запускаем</p>
<pre class="highlight"><code class="hljs brainfuck"><span class="hljs-comment">steroids</span> <span class="hljs-comment">connect</span> <span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">watch</span>
</code></pre><p>Ключ <code>--watch</code> нужен для отслеживания изменений и перезагрузки приложения.</p>
<p>После запуска этой команды в браузере откроется страница с QR-кодом.
Отсканировав QR-код всё тем же AppGyver Scaner, вы получите приложение прямо в
телефоне. Только имейте в виду, что телефон и компьютер должны находиться в
одной сети. При каждой редакции кода приложение будет обновляться – очень
удобно, особенно если работаешь над внешним видом интерфейса.</p>
<p>Если телефона под рукой нет, можно открыть приложение на макет в iOS simulator.
Для этого в терминале с запущенным <code>steroids</code> нужно просто написать</p>
<pre class="highlight"><code class="hljs undefined">simulator
</code></pre><h3 id="-">Что писать?</h3>
<p>Основной код приложения находится в
<a href="https://github.com/varya/finnish-counting/blob/vesions/0.0.1/www/javascripts/application.js">www/application.js</a>.
Оно ещё маленькое и не использует все возможности Steroids. Но уже очевидно, что
когда страниц станет больше, мне понадобится <a href="http://docs.appgyver.com/en/edge/steroids_Steroids%20Native%20UI_index.md.html#Steroids%C2%A0Native%C2%A0UI">Steroids Native
UI</a>.</p>
<p>Другие возможности фреймворка такие как удобное обращение к камере, файловой
системе телефона, нотификациям — хорошо задокументированы на страницах <a href="http://docs.appgyver.com/en/edge/index.html">API
Docs</a>. Там же есть примеры
использования <code>Cordova API</code> — именно с его помощью в моём приложении
проигрывается звук.</p>
<p>Новые приложения появляются каждый день, можно релизить и хвастаться в <a href="http://x.appgyver.com/xapps">AppGyver
Apps Gallery</a>. Только успевай с идеями: я вот
хотела написать мобильный аналог игры 2048, а он уже там есть. Значит, буду
развивать свою «считалку» :-)</p>
<p>Кстати, у кого есть телефон на Андроиде — проверьте, скачивается у вас моё
приложение, работает ли? Я пока могу проверить только на iOS, а одно из
преимуществ приложений на Steroids — то, что они кросс-платформенные, с
нативными фичами для каждой платформы, конечно.</p>
]]></description>
            <link>http://varya.me//ru/issues/first-steroids-app</link>
            <guid isPermaLink="true">http://varya.me//ru/issues/first-steroids-app</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Thu, 01 May 2014 20:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Локальная разработка и удаленный хостинг статики]]></title>
            <description><![CDATA[<p>На прошлой неделе мне понадобилось сделать сайт, статика которого раздаётся с
другого сервера. Это касалось всех статических файлов: как подключенных к HTML
документу CSS и JavaScript, так и изображений и шрифтов, использованных уже в
их коде.<excerpt/> Хотя очевидно, что все они эти ресурсы должны быть локальными во
время разработки. То есть задача была придумать магию, которая знает, где будет
размещена статика, и преобразовывает относительные пути в коде в абсолютные
согласно этому знанию.</p>
<p>Эту задачу я решила при помощи инструмента
<a href="http://bem.info/tools/optimizers/borschik/">Borschik</a>. Борщик-сборщик, всем
должно быть понятно. :-)</p>
<center>
<iframe src="//embed.gettyimages.com/embed/135591409?et=B_T3l-shrE-pr9-ELe_wJw&sig=5haG67PAzCxGourA96ZB7m9LwSket1v9PpvXEXNIkBM=" width="508" height="407" frameborder="0" scrolling="no"></iframe>
</center>

<p>Демо-проект с этим решением находится в репозитории
<a href="https://github.com/varya/st-deliverer">varya/st-deliverer</a></p>
<h3 id="-">Структура проекта</h3>
<p>Как вы позже увидите, <code>borschik</code> можно гибко настроить. Так что возможна любая
структура проекта. В моём проекте все хранится в директории
<a href="b.com/varya/st-deliverer/tree/master/src">src</a>.
После сборки получается HTML-файлы в папке
<a href="https://github.com/varya/st-deliverer/tree/gh-pages/dist/html">dist/html</a>.
Проверьте его код, и вы убедитесь, что статические файлы подключены с другого
хоста по абсолютному пути.</p>
<pre class="highlight"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>Deliver static assets with Borschik<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">link
</span>      <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span>
      <span class="hljs-attribute">href</span>=<span class="hljs-value">"http://varya.github.io/stor.../styles.css"</span>/&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body
</span>    <span class="hljs-attribute">class</span>=<span class="hljs-value">"page"</span>
    <span class="hljs-attribute">background</span>=<span class="hljs-value">"http://varya.github.io/stor.../grungy.jpg"</span>&gt;</span>
  ...
</code></pre>
<p>Страничку можно <a href="http://varya.me/st-deliverer/dist/html/">открыть в браузере</a> и
насладиться моим дизайном и прекрасным котиком.</p>
<h3 id="borschik-">Borschik в вашем проекте</h3>
<p>Borschik — это npm-пакет. Его можно установить глобально при помощи команды</p>
<pre class="highlight"><code class="hljs bash">npm install -g borschik
</code></pre>
<p>Но лично я предпочитаю локальные зависимости, так что завожу в корне проекта
файл
<a href="https://github.com/varya/st-deliverer/blob/master/package.json">package.json</a>:</p>
<pre class="highlight"><code class="hljs javascript">{
  ...
  <span class="hljs-string">"dependencies"</span>: {
    <span class="hljs-string">"borschik"</span>: <span class="hljs-string">"0.4.2"</span>
  },
  ...
}
</code></pre>
<h3 id="-">Настройка</h3>
<p>Прежде чем начинать преобразования, нужно проинструктировать <code>borschik</code>, что
преобразовывать и как. Для этого нужен конфигурационный файл
<a href="https://github.com/varya/st-deliverer/blob/master/.borschik">.borschik</a>:</p>
<pre class="highlight"><code class="hljs javascript">{
  <span class="hljs-string">"paths"</span> : {
    <span class="hljs-string">"src/img/"</span>: <span class="hljs-string">"http://varya.github.io/stor.../st-deliverer/img/"</span>,
    <span class="hljs-string">"src/css/"</span>: <span class="hljs-string">"http://varya.github.io/stor.../st-deliverer/css/"</span>,
    <span class="hljs-string">"src/font/"</span>: <span class="hljs-string">"http://varya.github.io/storage/fonts/"</span>

  }
}
</code></pre>
<p>Заметьте, для разных путей можно настроить разную замену. Здесь это видно на
примере с фонами.</p>
<h3 id="-">Запускаем!</h3>
<p>Запустите <code>borschik</code> над файлом, содержащим ссылки на локальные статические
ресурсы, и вы получите результат преобразования. Например,</p>
<pre class="highlight"><code class="hljs bash">./node_modules/borschik/bin/borschik \
  --input=src/css/styles.css
</code></pre>
<p>Чтобы использовать это в сборке, понадобится ещё один флаг <code>--output</code>,
сообщающий куда записать получившееся.</p>
<p><code>borschik</code> знаком с синтаксисом web-технологий. То есть &quot;ссылки&quot; размещенные в
простом тексте останутся нетронутыми.</p>
<h3 id="-">Система сборки</h3>
<p>Теперь <code>borschik</code> можно включить в систему сборки проекта. В моём случае это
небольшой
<a href="https://github.com/varya/st-deliverer/blob/master/Makefile">Makefile</a>, спасибо
<a href="https://github.com/alexeyten">@alexeyten</a> за 90% его содержания. :-) Но есть
также и плагин для grunt <a href="https://github.com/megatolya/grunt-borschik">megatolya/grunt-borschik</a>.<br/>
Конечно, <code>borschik</code> включен в системы сборки БЭМ-проектов
<a href="http://bem.info/tools/bem/bem-tools/">bem-tools</a>
и <a href="https://github.com/enb-make/enb">enb</a></p>
<h3 id="-">Результат</h3>
<p>Для закрепления <a href="http://varya.me/st-deliverer/dist/html/">проведайте котика ещё раз</a>.</p>
<p>А узнать о многих других возможностях <code>borschik</code> можно из статьи
<a href="http://ru.bem.info/articles/borschik/">http://ru.bem.info/articles/borschik/</a>.</p>
]]></description>
            <link>http://varya.me//ru/issues/borschik-static-assets</link>
            <guid isPermaLink="true">http://varya.me//ru/issues/borschik-static-assets</guid>
            <dc:creator><![CDATA[Varya Stepanova]]></dc:creator>
            <pubDate>Fri, 11 Apr 2014 20:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>